name: Build and Release VPM

on:
  push:
    branches:
      - main  # or your default branch name

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Get latest tag and increment version
      id: get_version
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        LATEST_VERSION=${LATEST_TAG#v}
        IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=$((VERSION_PARTS[2] + 1))
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Download VPM
      run: |
        echo "Downloading VPM v${{ steps.get_version.outputs.new_version }}..."
        curl -LO "https://github.com/getinstachip/vpm/archive/v${{ steps.get_version.outputs.new_version }}.tar.gz"

    - name: Extract VPM
      run: |
        echo "Extracting VPM v${{ steps.get_version.outputs.new_version }}..."
        tar -xzf "v${{ steps.get_version.outputs.new_version }}.tar.gz"

    - name: Build VPM
      run: |
        echo "Building VPM..."
        cd "vpm-${{ steps.get_version.outputs.new_version }}"
        cargo build --release

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.new_version }}
        release_name: Release v${{ steps.get_version.outputs.new_version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./vpm-${{ steps.get_version.outputs.new_version }}/target/release/vpm
        asset_name: vpm
        asset_content_type: application/octet-stream

    - name: Clean up
      run: |
        rm -rf "vpm-${{ steps.get_version.outputs.new_version }}"
        rm "v${{ steps.get_version.outputs.new_version }}.tar.gz"

    - name: Create and push new tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a v${{ steps.get_version.outputs.new_version }} -m "Release v${{ steps.get_version.outputs.new_version }}"
        git push origin v${{ steps.get_version.outputs.new_version }}